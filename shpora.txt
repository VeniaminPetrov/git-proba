gitk    программка для комитов

Основные команды
git init
Позволяет проинициализировать репозиторий в текущей папке

git status
Показывает текущий статус

git add
Отслеживает изменения файлов

git add index.html — добавляет index.html
git add . — добавляет все файлы
git commit
Сохраняет изменения в коммит

git commit -m 'commit message' — создает коммит с сообщением
git branch
Работа с ветками в репозитории

git branch — показывает список веток
git branch branch-name — создает новую ветку branch-name
git branch -D branch-name — удаляет ветку branch-name
git branch -m branch-name - переименовывает ветку
git branch -a - показывает все ветки которые находятся на удаленном сервере
git checkout
Переключается на другую ветку , даже на удаленную

git checkout branch-name — переключается на последний коммит в ветке branch-name
git checkout -b branch-name — создает и переключается на ветку branch-name
git merge
Совмещает текущую ветку с выбранной

git merge branch-name — совмещает текущую ветку с branch-name

1.git remote add name-origin <url>  создание подключение удаленного репозитория на gitHube
"name-origin " имя репозитория
2.git push -u origin <branch>  обязательно связать локальную ветку с удаленной
3.git remote -v положение дел
4.git branch -vv  какс вязаны ветки ра локальной машине и на удаленной
5.git remote проверяет о наличии серверов

git log
git log --pretty=oneline   log в строку    c флагами   or --max-count=3   или  --all  or --author="AUTHOR"


git config
Конфигурация и параметры git

git config --global user.name — Показывает имя пользователя
git config --global user.name 'new user' — Изменяет имя пользователя
git config --global user.email — Показывает email пользователя
git config --global user.email 'test@mail.ru' — Изменяет email пользователя
git push
Заливает текущие локальные коммиты в удаленный репозиторий

git pull
Забирает изменения с удаленного репозитория в локальный

git clone
Клонирует проект с удаленного репозитория

=============================
git cat-file <SHA1> прочтение файлов

git reset HEAD <file-name>    удаляет комиты из индексирования
потом смотрим статус и git checkout <file-name> сбрасываемся до начала изменения  файла
потом смотрим статус  и делаем индексацию файлов что нужны и комитим

git revert HEAD



git reset --soft HEAD~1  мягко  сбрасывает 1 последний комит

git reset --hard HEAD~1 жестко сбрасывает и удалят изменения

git ls-files    показывает какие файлы готовы для коммита(команда после  git add <file- name>)

